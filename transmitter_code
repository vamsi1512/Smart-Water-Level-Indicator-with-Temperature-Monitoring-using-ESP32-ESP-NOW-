#include <esp_now.h>
#include <WiFi.h>

#define echoPin 33
#define trigPin 32

int distance;
long duration;


uint8_t broadcastAddress1[] = {0x88, 0x13, 0xBF, 0x02, 0x20, 0x70};


typedef struct test_struct {
  int a;
} test_struct;

test_struct test;

esp_now_peer_info_t peerInfo;

void OnDataSent(const esp_now_send_info_t *info, esp_now_send_status_t status) {
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           info->peer_addr[0], info->peer_addr[1], info->peer_addr[2],
           info->peer_addr[3], info->peer_addr[4], info->peer_addr[5]);

  Serial.print(macStr);
  Serial.print(" send status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup() {
  Serial.begin(115200);

  pinMode(echoPin, INPUT);
  pinMode(trigPin, OUTPUT);

  WiFi.mode(WIFI_STA);

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  esp_now_register_send_cb(OnDataSent);

  memcpy(peerInfo.peer_addr, broadcastAddress1, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
}

void loop() {
  // Ultrasonic sensor measurement
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.0344 / 2;


  test.a = distance;

  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  esp_err_t result = esp_now_send(peerInfo.peer_addr, (uint8_t *) &test, sizeof(test_struct));

  if (result == ESP_OK) {
    Serial.println("Sent with success");
  } else {
    Serial.println("Error sending the data");
  }

  delay(2000);
}
