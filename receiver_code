#include <esp_now.h>
#include <WiFi.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);
#define buzzer 18
typedef struct test_struct {
int a;
} test_struct;
test_struct myData;
bool dataReceived = false;
int lastPercent = -1;
unsigned long lastDataTime = 0;
void OnDataRecv(const esp_now_recv_info_t *info, const uint8_t *incomingData, int len) {
memcpy(&myData, incomingData, sizeof(myData));
dataReceived = true;
lastDataTime = millis();
Serial.print("Bytes received = ");
Serial.println(len);
Serial.print("Water level = ");
Serial.println(myData.a);
}

void setup() {
Serial.begin(115200);
WiFi.mode(WIFI_STA);
pinMode(buzzer, OUTPUT);
digitalWrite(buzzer, LOW);
lcd.init();
lcd.backlight();
if (esp_now_init() != ESP_OK) {
Serial.println("Error initializing ESP-NOW");
return;
}
esp_now_register_recv_cb(OnDataRecv);
}
void loop() {
if (!dataReceived) {
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Waiting for data");
digitalWrite(buzzer, LOW);
delay(1000);
return;
}
if (millis() - lastDataTime > 3000) {
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("No recent data");
digitalWrite(buzzer, LOW);
delay(1000);
return;
}
if (myData.a < 0 || myData.a > 41) {
Serial.println("Invalid sensor reading. Ignoring...");
digitalWrite(buzzer, LOW);
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Invalid reading");
delay(1000);
return;
}
int oldpercent = map(myData.a, 41, 0, 0, 99);
int newpercent = constrain(oldpercent * 2, 0, 100);
Serial.println("Tank Percent = " + String(newpercent) + "%");
if (newpercent != lastPercent) {
lcd.clear();

if (newpercent > 90) {
lcd.setCursor(0, 0);
lcd.print("HIGH");
digitalWrite(buzzer, HIGH);
}
else if (newpercent < 20) {
lcd.setCursor(0, 0);
lcd.print("LOW");
digitalWrite(buzzer, HIGH);
}
else {
lcd.setCursor(0, 0);
lcd.print("MEDIUM");
digitalWrite(buzzer, LOW);
}
lcd.setCursor(0, 1);
lcd.print("Level: ");
lcd.print(newpercent);
lcd.print("%");
lastPercent = newpercent;
}
delay(500);
}
